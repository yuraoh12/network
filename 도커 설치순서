도커 설치 명령어

필요한 종속성을 설치
sudo yum install yum-utils device-mapper-persistent-data lvm2 -y
도커 안정적 리포지토리를 시스템에 추가
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo -y
도커 리포지토리가 사용되도록 설정되었으므로 yum을 사용해서 최신 버전의 도커-ce를 설치
sudo yum install docker-ce -y
도커 실행
sudo systemctl start docker
도커를 시작하고 부팅할때 도커가 자동으로 시작되도록 설정
sudo systemctl enable docker
도커 컴포즈 설치 명령어
sudo curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
run : 도커 실행
docker run 옵션
옵션
-p => 호스트와 컨테이너의 포트를 연결(포워딩)
-p 호스트포트넘버:컨테이너내에서 사용되는 포트넘버/프로토콜
--rm => 프로세스를 종료시 컨테이너 자동 제거
-v => 호스트와 컨테이너의 디렉토리를 연결

ps : 컨테이너 목록 확인
docker ps 옵션
-a => 실행했다가 종료된 컨테이너도 보임

컨테이너 아이디를 이용해서 컨테이너 제거
rm : 컨테이너 제거
docker rm 옵션 컨테이너아이디
컨테이너 아이디를 입력할때 앞부분이 겹치지 않는다면 2글자 정도만 입력해도됨.
docker rm -f $(docker ps -a -q)

stop : 컨테이너 중지
docker stop 옵션 컨테이너이름

NAT(network address translation, 네트워크주소변환)

도커네트워크
18일차
MariaDB를 mariadb1 이라는 컨테이너 이름으로 실행
docker run \
--name mariadb1 \
-d \
--restart=always \
-e MARIADB_ROOT_PASSWORD=it123414 \
-p 3306:3306 \
-v /docker/projects/mariadb1/conf.d:/etc/mysql/conf.d \
-v /docker/projects/mariadb1/mysql:/var/lib/mysql \
-v /docker/projects/mariadb1/run/mysqld:/run/mysqld/ \
mariadb:latest

mariadb1 안에 명령어 실행, mysql client 접속
docker exec -it mariadb1 mysql -u root -p

추가적으로 가능한 명령어들 소개

mariadb1 안에 명령어 실행, 보안강화세팅
docker exec -it mariadb1 /usr/bin/mariadb-secure-installation

mariadb1 안에 명령어 실행, 서비스재실행
docker exec mariadb1 service mariadb restart

mariadb1 안에 명령어 실행, 서비스 끄기
docker exec mariadb1 service mariadb stop

mariadb1 안에 명령어 실행, bash
docker exec -it mariadb1 bash

mariadb1 이라는 컨테이너를 제거
docker rm -f mariadb1

No chain/target/match by that name` 라는 메세지가 나올 때, 아래 명령어 입력 후 다시시도
sudo iptables -t filter -F
sudo iptables -t filter -X
sudo systemctl restart docker

sudo vim /etc/my.cnf.d/mysql-clients.cnf

[mysql]
...
socket=/docker/projects/mariadb1/run/mysqld/mysqld.sock # 소켓파일 추가
VIM 종료

mysql -u root - p

19일차
이미지 => 컨테이너 실행에 필요한 파일과 설정을 포함하고 있는 것
지난 시간에 나간 내용

도커란 무엇인지
도커 툴박스 다운로드
도커 툴박스 설치 및 실행
official nginx 이미지 다운로드
nginx 이미지 실행과 포트포워딩
도커 툴박스의 특징 및 한계 설명
centos에 도커 설치
도커컴포즈 설치
sudo 없이 docker 명령어 사용할 수 있도록
sudo usermod -aG docker ${USER} # 현재 접속중인 사용자에게 권한을 주기
sudo usermod -aG docker itit # itit 사용자에게 권한주기
푸티재시작
마리아 db를 mariadb1이라는 컨테이너 이름으로 실행
기존 mysql 클라이언트의 unix 소켓 방식으로 도커안의
마리아디비에 접속
pureftpd에 새로운 mysql 소켓파일 설정 후 접속
도커안의 새로운 mysql에 사용자와 디비를 셋팅
도커 기본 명령어
docker serch 이미지이름 # 도커이미지검색
docker pull 이미지이름 # 도커 이미지 다운로드
docker rmi -f 이미지이름 # 도커 이미지 삭제
docker run 이미지이름 # 이미지 실행, 컨테이너이름이 랜덤하게 정해짐
docker run --name nn 이미지이름 # 컨테이너시작, 컨테이너이름이 nn으로 정해짐
docker ps # 도커컨테이너보기
docker ps -a # 도커컨테이너보기(정지된 컨테이너도 보기)
docker stop docker 컨테이너이름or컨테이너id # 도커컨테이너 중지 스스로 꺼지도록 기다림
docker stop kill 컨테이너이름or컨테이너id # 도커컨테이너 중지 무식하게 바로 끄기
docker rm -f 컨테이너이름 or 컨테이너id # 도커컨테이너 삭제

도커 볼륨
docker volume create 볼륨이름
docker volume ls

sudo vim /etc/pure-ftpd/pureftpd-mysql.conf

파이썬

FROM python:3

WORKDIR /usr/src/app

COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD [ "python", "./your-daemon-or-script.py" ]

docker run -d
--name python1
-p 8000:8000
-v /docker/projects/python1/src:/usr/src/app
python:3
tail -f /dev/null

이미 실행중인 도커컨테이너 python1 내부로 들어가는 명령어
docker exec -it python1 bash
docker exec 컨테이너명 bash
-d # 컨테이너를 백그라운드로 실행
-p # 컨테이너의 포트를 호스트와 연결
--name # 컨테이너 이름 설정
-e # 컨테이너에서 환경변수를 설정
i # 표준입력
t # tty모드로 사용 bash를 사용하기 위해 꼭 필요

vim, mlocate설치
apt-get install vim mlocate
apt-get update
전체 패키지들 최신화
yum update -y
컨테이너 내부에서 나가는 방법은 exit
pip install --upgrade pip
pip install Django mysqlclient
-v 도커밖:도커안
호스트OS : centos에서 도커컨테이너와 폴더를 공유할때 사용
도커밖은 Centos
도커안은 각각의 컨테이너

python1컨테이너에서 Django설치
python1컨테이너에서 장고 앱 생성
명령어 : django-admin startproject base .
/usr/src/app/에서 실행이 되야함
vim base/settings.py
!!settings.py파일에서 ip추가해줘야함!!
python manage.py runserver 0.0.0.0:8000
20일차
MariaDB 연결하여 초기DB 세팅, 즉 마이그레이트 수행
DATABASES = {
'default': {
'ENGINE': 'django.db.backends.mysql',
'NAME': 'site1',
'USER': 'itit',
'PASSWORD': 'it123414',
'HOST': '172.17.0.1',
'PORT': '3306',
'OPTIONS': {
'init_command': "SET sql_mode='STRICT_TRANS_TABLES'", # 추가, 만약에 이 부분 때문에 오류가 난다면, 이 라인을 지우고 다시 시도해주세요.
},
}
}

MYSQL root 패스워드 분실

passwordreset.sql 파일생성
sudo vim /docker/projects/mariadb1/passwordreset.sql
passwordreset.sql 파일내용에 추가
GRANT ALL PRIVILEGES ON . TO root@% IDENTIFIED BY 'it123414';
GRANT ALL PRIVILEGES ON . TO itit@% IDENTIFIED BY 'it123414';
기존 mariadb1 컨테이너 삭제
docker rm -f mariadb1
재시작
docker run \
--name mariadb1 \
-d \
--restart=always \
-e MARIADB_ROOT_PASSWORD=it123414 \
-p 3306:3306 \
-v /docker/projects/mariadb1/conf.d:/etc/mysql/conf.d \
-v /docker/projects/mariadb1/mysql:/var/lib/mysql \
-v /docker/projects/mariadb1/run/mysqld:/run/mysqld/ \
mariadb:latest
접속 확인
docker exec -it mariadb1 mysql -u root -p it123414
폴더에 깃 연결
docker exec python__2 rm -rf /data/site_projects/python__2/src/
docker exec python__2 mkdir /data/site_projects/python__2/src/
docker exec python__2 mkdir /data/site_projects/python__2/src/logs/
docker exec python__2 bash -c "cd /data/site_projects/python__2/src/ ; git init"
docker exec python__2 bash -c "cd /data/site_projects/python__2/src/ ; git remote add origin https://github.com/yuraoh12/레포지토리명"
